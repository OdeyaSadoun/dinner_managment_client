{
  "version": 3,
  "sources": ["../../rtl-css-js/dist/cjs/convert-51dab0c6.js", "../../rtl-css-js/dist/cjs/index.js", "../../jss-rtl/lib/main.js"],
  "sourcesContent": ["'use strict';\n\n/**\n * Takes an array of [keyValue1, keyValue2] pairs and creates an object of {keyValue1: keyValue2, keyValue2: keyValue1}\n * @param {Array} array the array of pairs\n * @return {Object} the {key, value} pair object\n */\nfunction arrayToObject(array) {\n  return array.reduce(function (obj, _ref) {\n    var prop1 = _ref[0],\n      prop2 = _ref[1];\n    obj[prop1] = prop2;\n    obj[prop2] = prop1;\n    return obj;\n  }, {});\n}\nfunction isBoolean(val) {\n  return typeof val === 'boolean';\n}\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\nfunction isNullOrUndefined(val) {\n  return val === null || typeof val === 'undefined';\n}\nfunction isObject(val) {\n  return val && typeof val === 'object';\n}\nfunction isString(val) {\n  return typeof val === 'string';\n}\nfunction includes(inclusive, inclusee) {\n  return inclusive.indexOf(inclusee) !== -1;\n}\n\n/**\n * Flip the sign of a CSS value, possibly with a unit.\n *\n * We can't just negate the value with unary minus due to the units.\n *\n * @private\n * @param {String} value - the original value (for example 77%)\n * @return {String} the result (for example -77%)\n */\nfunction flipSign(value) {\n  if (parseFloat(value) === 0) {\n    // Don't mangle zeroes\n    return value;\n  }\n  if (value[0] === '-') {\n    return value.slice(1);\n  }\n  return \"-\" + value;\n}\nfunction flipTransformSign(match, prefix, offset, suffix) {\n  return prefix + flipSign(offset) + suffix;\n}\n\n/**\n * Takes a percentage for background position and inverts it.\n * This was copied and modified from CSSJanus:\n * https://github.com/cssjanus/cssjanus/blob/4245f834365f6cfb0239191a151432fb85abab23/src/cssjanus.js#L152-L175\n * @param {String} value - the original value (for example 77%)\n * @return {String} the result (for example 23%)\n */\nfunction calculateNewBackgroundPosition(value) {\n  var idx = value.indexOf('.');\n  if (idx === -1) {\n    value = 100 - parseFloat(value) + \"%\";\n  } else {\n    // Two off, one for the \"%\" at the end, one for the dot itself\n    var len = value.length - idx - 2;\n    value = 100 - parseFloat(value);\n    value = value.toFixed(len) + \"%\";\n  }\n  return value;\n}\n\n/**\n * This takes a list of CSS values and converts it to an array\n * @param {String} value - something like `1px`, `1px 2em`, or `3pt rgb(150, 230, 550) 40px calc(100% - 5px)`\n * @return {Array} the split values (for example: `['3pt', 'rgb(150, 230, 550)', '40px', 'calc(100% - 5px)']`)\n */\nfunction getValuesAsList(value) {\n  return value.replace(/ +/g, ' ') // remove all extraneous spaces\n  .split(' ').map(function (i) {\n    return i.trim();\n  }) // get rid of extra space before/after each item\n  .filter(Boolean) // get rid of empty strings\n  // join items which are within parenthese\n  // luckily `calc (100% - 5px)` is invalid syntax and it must be `calc(100% - 5px)`, otherwise this would be even more complex\n  .reduce(function (_ref2, item) {\n    var list = _ref2.list,\n      state = _ref2.state;\n    var openParansCount = (item.match(/\\(/g) || []).length;\n    var closedParansCount = (item.match(/\\)/g) || []).length;\n    if (state.parensDepth > 0) {\n      list[list.length - 1] = list[list.length - 1] + \" \" + item;\n    } else {\n      list.push(item);\n    }\n    state.parensDepth += openParansCount - closedParansCount;\n    return {\n      list: list,\n      state: state\n    };\n  }, {\n    list: [],\n    state: {\n      parensDepth: 0\n    }\n  }).list;\n}\n\n/**\n * This is intended for properties that are `top right bottom left` and will switch them to `top left bottom right`\n * @param {String} value - `1px 2px 3px 4px` for example, but also handles cases where there are too few/too many and\n * simply returns the value in those cases (which is the correct behavior)\n * @return {String} the result - `1px 4px 3px 2px` for example.\n */\nfunction handleQuartetValues(value) {\n  var splitValues = getValuesAsList(value);\n  if (splitValues.length <= 3 || splitValues.length > 4) {\n    return value;\n  }\n  var top = splitValues[0],\n    right = splitValues[1],\n    bottom = splitValues[2],\n    left = splitValues[3];\n  return [top, left, bottom, right].join(' ');\n}\n\n/**\n *\n * @param {String|Number|Object} value css property value to test\n * @returns If the css property value can(should?) have an RTL equivalent\n */\nfunction canConvertValue(value) {\n  return !isBoolean(value) && !isNullOrUndefined(value);\n}\n\n/**\n * Splits a shadow style into its separate shadows using the comma delimiter, but creating an exception\n * for comma separated values in parentheses often used for rgba colours.\n * @param {String} value\n * @returns {Array} array of all box shadow values in the string\n */\nfunction splitShadow(value) {\n  var shadows = [];\n  var start = 0;\n  var end = 0;\n  var rgba = false;\n  while (end < value.length) {\n    if (!rgba && value[end] === ',') {\n      shadows.push(value.substring(start, end).trim());\n      end++;\n      start = end;\n    } else if (value[end] === \"(\") {\n      rgba = true;\n      end++;\n    } else if (value[end] === ')') {\n      rgba = false;\n      end++;\n    } else {\n      end++;\n    }\n  }\n\n  // push the last shadow value if there is one\n  // istanbul ignore next\n  if (start != end) {\n    shadows.push(value.substring(start, end + 1));\n  }\n  return shadows;\n}\n\n// some values require a little fudging, that fudging goes here.\nvar propertyValueConverters = {\n  padding: function padding(_ref) {\n    var value = _ref.value;\n    if (isNumber(value)) {\n      return value;\n    }\n    return handleQuartetValues(value);\n  },\n  textShadow: function textShadow(_ref2) {\n    var value = _ref2.value;\n    var flippedShadows = splitShadow(value).map(function (shadow) {\n      // intentionally leaving off the `g` flag here because we only want to change the first number (which is the offset-x)\n      return shadow.replace(/(^|\\s)(-*)([.|\\d]+)/, function (match, whiteSpace, negative, number) {\n        if (number === '0') {\n          return match;\n        }\n        var doubleNegative = negative === '' ? '-' : '';\n        return \"\" + whiteSpace + doubleNegative + number;\n      });\n    });\n    return flippedShadows.join(',');\n  },\n  borderColor: function borderColor(_ref3) {\n    var value = _ref3.value;\n    return handleQuartetValues(value);\n  },\n  borderRadius: function borderRadius(_ref4) {\n    var value = _ref4.value;\n    if (isNumber(value)) {\n      return value;\n    }\n    if (includes(value, '/')) {\n      var _value$split = value.split('/'),\n        radius1 = _value$split[0],\n        radius2 = _value$split[1];\n      var convertedRadius1 = propertyValueConverters.borderRadius({\n        value: radius1.trim()\n      });\n      var convertedRadius2 = propertyValueConverters.borderRadius({\n        value: radius2.trim()\n      });\n      return convertedRadius1 + \" / \" + convertedRadius2;\n    }\n    var splitValues = getValuesAsList(value);\n    switch (splitValues.length) {\n      case 2:\n        {\n          return splitValues.reverse().join(' ');\n        }\n      case 4:\n        {\n          var topLeft = splitValues[0],\n            topRight = splitValues[1],\n            bottomRight = splitValues[2],\n            bottomLeft = splitValues[3];\n          return [topRight, topLeft, bottomLeft, bottomRight].join(' ');\n        }\n      default:\n        {\n          return value;\n        }\n    }\n  },\n  background: function background(_ref5) {\n    var value = _ref5.value,\n      valuesToConvert = _ref5.valuesToConvert,\n      isRtl = _ref5.isRtl,\n      bgImgDirectionRegex = _ref5.bgImgDirectionRegex,\n      bgPosDirectionRegex = _ref5.bgPosDirectionRegex;\n    if (isNumber(value)) {\n      return value;\n    }\n\n    // Yeah, this is in need of a refactor 🙃...\n    // but this property is a tough cookie 🍪\n    // get the backgroundPosition out of the string by removing everything that couldn't be the backgroundPosition value\n    var backgroundPositionValue = value.replace(/(url\\(.*?\\))|(rgba?\\(.*?\\))|(hsl\\(.*?\\))|(#[a-fA-F0-9]+)|((^| )(\\D)+( |$))/g, '').trim();\n    // replace that backgroundPosition value with the converted version\n    value = value.replace(backgroundPositionValue, propertyValueConverters.backgroundPosition({\n      value: backgroundPositionValue,\n      valuesToConvert: valuesToConvert,\n      isRtl: isRtl,\n      bgPosDirectionRegex: bgPosDirectionRegex\n    }));\n    // do the backgroundImage value replacing on the whole value (because why not?)\n    return propertyValueConverters.backgroundImage({\n      value: value,\n      valuesToConvert: valuesToConvert,\n      bgImgDirectionRegex: bgImgDirectionRegex\n    });\n  },\n  backgroundImage: function backgroundImage(_ref6) {\n    var value = _ref6.value,\n      valuesToConvert = _ref6.valuesToConvert,\n      bgImgDirectionRegex = _ref6.bgImgDirectionRegex;\n    if (!includes(value, 'url(') && !includes(value, 'linear-gradient(')) {\n      return value;\n    }\n    return value.replace(bgImgDirectionRegex, function (match, g1, group2) {\n      return match.replace(group2, valuesToConvert[group2]);\n    });\n  },\n  backgroundPosition: function backgroundPosition(_ref7) {\n    var value = _ref7.value,\n      valuesToConvert = _ref7.valuesToConvert,\n      isRtl = _ref7.isRtl,\n      bgPosDirectionRegex = _ref7.bgPosDirectionRegex;\n    return value\n    // intentionally only grabbing the first instance of this because that represents `left`\n    .replace(isRtl ? /^((-|\\d|\\.)+%)/ : null, function (match, group) {\n      return calculateNewBackgroundPosition(group);\n    }).replace(bgPosDirectionRegex, function (match) {\n      return valuesToConvert[match];\n    });\n  },\n  backgroundPositionX: function backgroundPositionX(_ref8) {\n    var value = _ref8.value,\n      valuesToConvert = _ref8.valuesToConvert,\n      isRtl = _ref8.isRtl,\n      bgPosDirectionRegex = _ref8.bgPosDirectionRegex;\n    if (isNumber(value)) {\n      return value;\n    }\n    return propertyValueConverters.backgroundPosition({\n      value: value,\n      valuesToConvert: valuesToConvert,\n      isRtl: isRtl,\n      bgPosDirectionRegex: bgPosDirectionRegex\n    });\n  },\n  transition: function transition(_ref9) {\n    var value = _ref9.value,\n      propertiesToConvert = _ref9.propertiesToConvert;\n    return value.split(/,\\s*/g).map(function (transition) {\n      var values = transition.split(' ');\n\n      // Property is always defined first\n      values[0] = propertiesToConvert[values[0]] || values[0];\n      return values.join(' ');\n    }).join(', ');\n  },\n  transitionProperty: function transitionProperty(_ref10) {\n    var value = _ref10.value,\n      propertiesToConvert = _ref10.propertiesToConvert;\n    return value.split(/,\\s*/g).map(function (prop) {\n      return propertiesToConvert[prop] || prop;\n    }).join(', ');\n  },\n  transform: function transform(_ref11) {\n    var value = _ref11.value;\n    // This was copied and modified from CSSJanus:\n    // https://github.com/cssjanus/cssjanus/blob/4a40f001b1ba35567112d8b8e1d9d95eda4234c3/src/cssjanus.js#L152-L153\n    var nonAsciiPattern = \"[^\\\\u0020-\\\\u007e]\";\n    var escapePattern = \"(?:\" + '(?:(?:\\\\[0-9a-f]{1,6})(?:\\\\r\\\\n|\\\\s)?)' + \"|\\\\\\\\[^\\\\r\\\\n\\\\f0-9a-f])\";\n    var signedQuantPattern = \"((?:-?\" + ('(?:[0-9]*\\\\.[0-9]+|[0-9]+)' + \"(?:\\\\s*\" + '(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)' + \"|\" + (\"-?\" + (\"(?:[_a-z]|\" + nonAsciiPattern + \"|\" + escapePattern + \")\") + (\"(?:[_a-z0-9-]|\" + nonAsciiPattern + \"|\" + escapePattern + \")\") + \"*\") + \")?\") + \")|(?:inherit|auto))\";\n    var translateXRegExp = new RegExp(\"(translateX\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"(\\\\s*\\\\))\", 'gi');\n    var translateRegExp = new RegExp(\"(translate\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"((?:\\\\s*,\\\\s*\" + signedQuantPattern + \"){0,1}\\\\s*\\\\))\", 'gi');\n    var translate3dRegExp = new RegExp(\"(translate3d\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"((?:\\\\s*,\\\\s*\" + signedQuantPattern + \"){0,2}\\\\s*\\\\))\", 'gi');\n    var rotateRegExp = new RegExp(\"(rotate[ZY]?\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"(\\\\s*\\\\))\", 'gi');\n    return value.replace(translateXRegExp, flipTransformSign).replace(translateRegExp, flipTransformSign).replace(translate3dRegExp, flipTransformSign).replace(rotateRegExp, flipTransformSign);\n  }\n};\npropertyValueConverters.objectPosition = propertyValueConverters.backgroundPosition;\npropertyValueConverters.margin = propertyValueConverters.padding;\npropertyValueConverters.borderWidth = propertyValueConverters.padding;\npropertyValueConverters.boxShadow = propertyValueConverters.textShadow;\npropertyValueConverters.webkitBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.mozBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.WebkitBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.MozBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.borderStyle = propertyValueConverters.borderColor;\npropertyValueConverters.webkitTransform = propertyValueConverters.transform;\npropertyValueConverters.mozTransform = propertyValueConverters.transform;\npropertyValueConverters.WebkitTransform = propertyValueConverters.transform;\npropertyValueConverters.MozTransform = propertyValueConverters.transform;\npropertyValueConverters.transformOrigin = propertyValueConverters.backgroundPosition;\npropertyValueConverters.webkitTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.mozTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.WebkitTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.MozTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.webkitTransition = propertyValueConverters.transition;\npropertyValueConverters.mozTransition = propertyValueConverters.transition;\npropertyValueConverters.WebkitTransition = propertyValueConverters.transition;\npropertyValueConverters.MozTransition = propertyValueConverters.transition;\npropertyValueConverters.webkitTransitionProperty = propertyValueConverters.transitionProperty;\npropertyValueConverters.mozTransitionProperty = propertyValueConverters.transitionProperty;\npropertyValueConverters.WebkitTransitionProperty = propertyValueConverters.transitionProperty;\npropertyValueConverters.MozTransitionProperty = propertyValueConverters.transitionProperty;\n\n// kebab-case versions\n\npropertyValueConverters['text-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['border-color'] = propertyValueConverters.borderColor;\npropertyValueConverters['border-radius'] = propertyValueConverters.borderRadius;\npropertyValueConverters['background-image'] = propertyValueConverters.backgroundImage;\npropertyValueConverters['background-position'] = propertyValueConverters.backgroundPosition;\npropertyValueConverters['background-position-x'] = propertyValueConverters.backgroundPositionX;\npropertyValueConverters['object-position'] = propertyValueConverters.objectPosition;\npropertyValueConverters['border-width'] = propertyValueConverters.padding;\npropertyValueConverters['box-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['-webkit-box-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['-moz-box-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['border-style'] = propertyValueConverters.borderColor;\npropertyValueConverters['-webkit-transform'] = propertyValueConverters.transform;\npropertyValueConverters['-moz-transform'] = propertyValueConverters.transform;\npropertyValueConverters['transform-origin'] = propertyValueConverters.transformOrigin;\npropertyValueConverters['-webkit-transform-origin'] = propertyValueConverters.transformOrigin;\npropertyValueConverters['-moz-transform-origin'] = propertyValueConverters.transformOrigin;\npropertyValueConverters['-webkit-transition'] = propertyValueConverters.transition;\npropertyValueConverters['-moz-transition'] = propertyValueConverters.transition;\npropertyValueConverters['transition-property'] = propertyValueConverters.transitionProperty;\npropertyValueConverters['-webkit-transition-property'] = propertyValueConverters.transitionProperty;\npropertyValueConverters['-moz-transition-property'] = propertyValueConverters.transitionProperty;\n\n// this will be an object of properties that map to their corresponding rtl property (their doppelganger)\nvar propertiesToConvert = arrayToObject([['paddingLeft', 'paddingRight'], ['marginLeft', 'marginRight'], ['left', 'right'], ['borderLeft', 'borderRight'], ['borderLeftColor', 'borderRightColor'], ['borderLeftStyle', 'borderRightStyle'], ['borderLeftWidth', 'borderRightWidth'], ['borderTopLeftRadius', 'borderTopRightRadius'], ['borderBottomLeftRadius', 'borderBottomRightRadius'],\n// kebab-case versions\n['padding-left', 'padding-right'], ['margin-left', 'margin-right'], ['border-left', 'border-right'], ['border-left-color', 'border-right-color'], ['border-left-style', 'border-right-style'], ['border-left-width', 'border-right-width'], ['border-top-left-radius', 'border-top-right-radius'], ['border-bottom-left-radius', 'border-bottom-right-radius']]);\nvar propsToIgnore = ['content'];\n\n// this is the same as the propertiesToConvert except for values\nvar valuesToConvert = arrayToObject([['ltr', 'rtl'], ['left', 'right'], ['w-resize', 'e-resize'], ['sw-resize', 'se-resize'], ['nw-resize', 'ne-resize']]);\n\n// Sorry for the regex 😞, but basically thisis used to replace _every_ instance of\n// `ltr`, `rtl`, `right`, and `left` in `backgroundimage` with the corresponding opposite.\n// A situation we're accepting here:\n// url('/left/right/rtl/ltr.png') will be changed to url('/right/left/ltr/rtl.png')\n// Definite trade-offs here, but I think it's a good call.\nvar bgImgDirectionRegex = new RegExp('(^|\\\\W|_)((ltr)|(rtl)|(left)|(right))(\\\\W|_|$)', 'g');\nvar bgPosDirectionRegex = new RegExp('(left)|(right)');\n\n/**\n * converts properties and values in the CSS in JS object to their corresponding RTL values\n * @param {Object} object the CSS in JS object\n * @return {Object} the RTL converted object\n */\nfunction convert(object) {\n  return Object.keys(object).reduce(function (newObj, originalKey) {\n    var originalValue = object[originalKey];\n    if (isString(originalValue)) {\n      // you're welcome to later code 😺\n      originalValue = originalValue.trim();\n    }\n\n    // Some properties should never be transformed\n    if (includes(propsToIgnore, originalKey)) {\n      newObj[originalKey] = originalValue;\n      return newObj;\n    }\n    var _convertProperty = convertProperty(originalKey, originalValue),\n      key = _convertProperty.key,\n      value = _convertProperty.value;\n    newObj[key] = value;\n    return newObj;\n  }, Array.isArray(object) ? [] : {});\n}\n\n/**\n * Converts a property and its value to the corresponding RTL key and value\n * @param {String} originalKey the original property key\n * @param {Number|String|Object} originalValue the original css property value\n * @return {Object} the new {key, value} pair\n */\nfunction convertProperty(originalKey, originalValue) {\n  var isNoFlip = /\\/\\*\\s?@noflip\\s?\\*\\//.test(originalValue);\n  var key = isNoFlip ? originalKey : getPropertyDoppelganger(originalKey);\n  var value = isNoFlip ? originalValue : getValueDoppelganger(key, originalValue);\n  return {\n    key: key,\n    value: value\n  };\n}\n\n/**\n * This gets the RTL version of the given property if it has a corresponding RTL property\n * @param {String} property the name of the property\n * @return {String} the name of the RTL property\n */\nfunction getPropertyDoppelganger(property) {\n  return propertiesToConvert[property] || property;\n}\n\n/**\n * This converts the given value to the RTL version of that value based on the key\n * @param {String} key this is the key (note: this should be the RTL version of the originalKey)\n * @param {String|Number|Object} originalValue the original css property value. If it's an object, then we'll convert that as well\n * @return {String|Number|Object} the converted value\n */\nfunction getValueDoppelganger(key, originalValue) {\n  if (!canConvertValue(originalValue)) {\n    return originalValue;\n  }\n  if (isObject(originalValue)) {\n    return convert(originalValue); // recursion 🌀\n  }\n\n  var isNum = isNumber(originalValue);\n  var isFunc = isFunction(originalValue);\n  var importantlessValue = isNum || isFunc ? originalValue : originalValue.replace(/ !important.*?$/, '');\n  var isImportant = !isNum && importantlessValue.length !== originalValue.length;\n  var valueConverter = propertyValueConverters[key];\n  var newValue;\n  if (valueConverter) {\n    newValue = valueConverter({\n      value: importantlessValue,\n      valuesToConvert: valuesToConvert,\n      propertiesToConvert: propertiesToConvert,\n      isRtl: true,\n      bgImgDirectionRegex: bgImgDirectionRegex,\n      bgPosDirectionRegex: bgPosDirectionRegex\n    });\n  } else {\n    newValue = valuesToConvert[importantlessValue] || importantlessValue;\n  }\n  if (isImportant) {\n    return newValue + \" !important\";\n  }\n  return newValue;\n}\n\nexports.arrayToObject = arrayToObject;\nexports.calculateNewBackgroundPosition = calculateNewBackgroundPosition;\nexports.canConvertValue = canConvertValue;\nexports.convert = convert;\nexports.convertProperty = convertProperty;\nexports.flipSign = flipSign;\nexports.flipTransformSign = flipTransformSign;\nexports.getPropertyDoppelganger = getPropertyDoppelganger;\nexports.getValueDoppelganger = getValueDoppelganger;\nexports.getValuesAsList = getValuesAsList;\nexports.handleQuartetValues = handleQuartetValues;\nexports.includes = includes;\nexports.isBoolean = isBoolean;\nexports.isFunction = isFunction;\nexports.isNullOrUndefined = isNullOrUndefined;\nexports.isNumber = isNumber;\nexports.isObject = isObject;\nexports.isString = isString;\nexports.propertiesToConvert = propertiesToConvert;\nexports.propertyValueConverters = propertyValueConverters;\nexports.propsToIgnore = propsToIgnore;\nexports.splitShadow = splitShadow;\nexports.valuesToConvert = valuesToConvert;\n", "'use strict';\n\nvar convert = require('./convert-51dab0c6.js');\n\n\n\nmodule.exports = convert.convert;\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar rtl = require(\"rtl-css-js\");\r\nvar convert = rtl['default'] || rtl;\r\nfunction jssRTL(_a) {\r\n    var _b = _a === void 0 ? {} : _a, _c = _b.enabled, enabled = _c === void 0 ? true : _c, _d = _b.opt, opt = _d === void 0 ? 'out' : _d;\r\n    return {\r\n        onProcessStyle: function (style, rule, sheet) {\r\n            if (rule.type === 'font-face') {\r\n                return style;\r\n            }\r\n            if (!enabled) {\r\n                if (typeof style.flip === 'boolean') {\r\n                    delete style.flip;\r\n                }\r\n                return style;\r\n            }\r\n            var flip = opt === 'out'; // If it's set to opt-out, then it should flip by default\r\n            if (typeof sheet.options.flip === 'boolean') {\r\n                flip = sheet.options.flip;\r\n            }\r\n            if (typeof style.flip === 'boolean') {\r\n                flip = style.flip;\r\n                delete style.flip;\r\n            }\r\n            if (!flip) {\r\n                return style;\r\n            }\r\n            return convert(typeof rule.toJSON === 'function' ? rule.toJSON() : style);\r\n        },\r\n    };\r\n}\r\nexports.default = jssRTL;\r\n"],
  "mappings": "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",
  "names": ["valuesToConvert", "bgImgDirectionRegex", "bgPosDirectionRegex", "propertiesToConvert", "transition"]
}
